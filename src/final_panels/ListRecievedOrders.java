/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package final_panels;
import GUI.adminDashboard;
import hmss_project.admin;
import hmss_project.medicine;
import hmss_project.order;
import hmss_project.orderDetails;
import hmss_project.vendor;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hassan
 */

public class ListRecievedOrders extends javax.swing.JPanel {

    /**
     * Creates new form ListEmployee
     * @throws java.sql.SQLException
     */
 
   
    //orderDetails od = new orderDetails();
    listVendorRecievedOrders LVRO;    
    int k=0;

    
    public ListRecievedOrders() throws SQLException {
        initComponents();
       addRowsToTable(ven.tkvidLog());
                
     
    }

    public ListRecievedOrders(int tkvidLog) throws SQLException {
        initComponents();
       addRowsToTable(ven.tkvidLog());
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(242, 242, 242));

        listTable.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        listTable.setForeground(new java.awt.Color(36, 49, 60));
        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ld", "vendor id", "response", "date", "status", "quality"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listTable.setGridColor(new java.awt.Color(26, 177, 136));
        listTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(listTable);
        if (listTable.getColumnModel().getColumnCount() > 0) {
            listTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 411, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTableMouseClicked
        
        try {
            LVRO = new listVendorRecievedOrders();
            LVRO.setOID(this.tkOrdID());
            LVRO.addRows();
            LVRO.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(ListRecievedOrders.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_listTableMouseClicked

    public int tkOrdID(){
    DefaultTableModel model = (DefaultTableModel) listTable.getModel();
    int selcRow = listTable.getSelectedRow();
    order x = new order();
    x.setOrderID(Integer.parseInt(model.getValueAt( selcRow , 0).toString()));
    k=x.getOrderID();
    return k;
  
 }
    private void listTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTableMousePressed
        // TODO add your handling code here:
    
    
    
    }//GEN-LAST:event_listTableMousePressed
 /*public int tkOrdID(){
    DefaultTableModel model = (DefaultTableModel) listTable.getModel();
    int selcRow = listTable.getSelectedRow();
    order x = new order();
      
      
    x.setOrderQuality(Boolean.parseBoolean(model.getValueAt(selcRow , 5).toString()));
    x.setOrderStatus(Boolean.parseBoolean(model.getValueAt(selcRow , 4).toString()));
    x.setVendorResponse(Boolean.parseBoolean(model.getValueAt(selcRow ,2).toString()));
    x.setVendorID(Integer.parseInt(model.getValueAt( selcRow , 1).toString()));
    x.setOrderTime(model.getValueAt(selcRow , 3).toString());
    x.setOrderID(Integer.parseInt(model.getValueAt( selcRow , 0).toString()));
    k=x.getOrderID();
      return k;
  
 }*/
    vendor ven = new vendor();
    
    public void addRowsToTable(int x)
    {
        DefaultTableModel model = (DefaultTableModel) listTable.getModel();
        Object rowData[] = new Object[6];
        
        
        ArrayList<order> orders=new ArrayList<>();
        try {
            orders = ven.ListReceivedOrders(ven.tkvidLog());
        } catch (SQLException ex) {
            Logger.getLogger(ListRecievedOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for(order m : orders)
        {
            rowData[0] = m.getOrderID();
            rowData[1] = m.getVendorID();
            rowData[2] = m.isVendorResponse();
            rowData[3] = m.getOrderTime();
            rowData[4] = m.isOrderStatus();
            rowData[5] = m.isOrderQuality();
            
            model.addRow(rowData);
        }
       
       
    }

    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listTable;
    // End of variables declaration//GEN-END:variables

    private void addRowsTolistTable() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void ListEmployee() throws SQLException {
        addRowsToTable(ven.tkvidLog());
    }
}
